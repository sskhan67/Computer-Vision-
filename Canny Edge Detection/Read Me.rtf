{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\fs43\fsmilli21600 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Canny Edge Detection\cf2 \cb3 \outl0\strokewidth0 :\
\pard\pardeftab720\sl560\partightenfactor0
\cf2 \
\pard\pardeftab720\sl380\sa240\partightenfactor0

\b\fs32 \cf2 \cb3 Algorithm Steps
\b0\fs43\fsmilli21600 \cf2 \cb3 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\fs32 \cf2 \cb3 \outl0\strokewidth0 \strokec2 The goal of this assignment is to implement the Canny Edge Detector algorithm to detect edges in an image. \
1. MAIN.m: This function is the top level file that performs all of the edge detection and template matching. \
2. Convolve.m: This function takes in the input image and a generic convolution mask (size mxn where m and n are odd). The function returns the convolution output.\
3. Gaussian.m and Gaussian_Deriv.m: These two functions must generate the Gaussian Kernel and Gaussian derivative kernel, respectively. Try sigma values: 0.6, 0.8, and 1.\
4. MagnitudeGradient.m: This function should yield the magnitude and gradient images.\
5. NonMaxSuppression.m: This function should perform non-maximal suppression on the magnitude image and produce a non-maximal suppression image.\
6. Hysteresis.m: This function accepts the non-maximal suppression image and performs 'Hysteresis and Edge-Linking' operation to produce the final output, Edge image.\
\pard\pardeftab720\sl380\sa240\partightenfactor0
\cf2 7. Perform template matching for waldo image and pepsi can images. Outline the found objects with a black or red window of template image's dimensions in the input image.\
}